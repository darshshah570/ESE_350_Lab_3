#include <asf.h>
#include <math.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "util/delay.h"

volatile int echo_ticks;
volatile uint16_t dac = 0;
volatile bool up = true;
volatile int tick_switch;

ISR(TIMER1_COMPA_vect) {		//output compare
	TIMSK1 = (1 << ICIE1);		//disable output compare, enable input capture
	TCCR1B |= 0x40;				//flip bit 6, next interrupt on rising edge
	up = true;
}

ISR(TIMER1_CAPT_vect) {			//input capture
	//rising edge logic
	if (up) {
		echo_ticks = ICR1;										//store starting edge
		TCCR1B &= ~(0x40);										//flip bit 6, next interrupt on falling edge
		up = false;
	}
	//falling edge logic
	if (!up) {
		echo_ticks = ICR1 - echo_ticks;							//falling edge - starting edge
		if (tick_switch < 9104) {
			dac = 0;
			} else if (tick_switch < 16352) {
			dac = 1;
			} else if (tick_switch < 23600) {
			dac = 2;
			} else if (tick_switch < 30848) {
			dac = 3;
			} else if (tick_switch < 38096) {
			dac = 4;
			} else if (tick_switch < 45344) {
			dac = 5;
			} else if (tick_switch < 52292) {
			dac = 6;
			} else {
			dac = 7;
		}
		putchar('e');
		TIMSK1 = 0x02;												//disable input capture, enable output compare
		PORTB = 0x02;												//set pb1 high
		OCR1A = TCNT1 + 160;
		putchar('t');
		up = true;
	}
}

int main (void)
{
	uart_init();
	DDRB = 0x1E;												//write from pb1,2,3,4, read from pb0
	TIMSK1 = 0x02;												//enable output compare interrupt
	sei();
	TCCR1B = 0x01;												//start clock, no prescaling
	PORTB = 0x02;												//set pb1 high
	TCCR1A = 0x80;												//clear on compare match
	OCR1A = 160;
	while(1) { 													// Run program forever
		PORTB = (dac << 2)|(DDRB & 0x03);
	}
}

